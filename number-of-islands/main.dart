import 'dart:collection';

class Solution {
  Set<(int, int)> visted = Set();
  int numIslands(List<List<String>> grid) {
    int rows = grid.length;
    int cols = grid[0].length;
    visted = Set();
    int result = 0;
    for (var c = 0; c < cols; c++) {
      for (var r = 0; r < rows; r++) {
        if (grid[r][c] == "1" && !visted.contains((r, c))) {
          visitAllNeibors(r, c, grid);
          result++;
        }
      }
    }
    return result;
  }

  void visitAllNeibors(int r, int c, List<List<String>> grid) {
    Queue<(int, int)> queue = Queue();
    int rows = grid.length;
    int cols = grid[0].length;
    queue.add((r, c));
    visted.add((r, c));
    List<(int, int)> moves = [(1, 0), (-1, 0), (0, -1), (0, 1)];
    while (queue.isNotEmpty) {
      (int, int) position = queue.removeFirst();
      for ((int, int) move in moves) {
        (int, int) nextPosition =
            (position.$1 + move.$1, position.$2 + move.$2);
        if (nextPosition.$1 >= 0 &&
            nextPosition.$1 < rows &&
            nextPosition.$2 >= 0 &&
            nextPosition.$2 < cols &&
            grid[nextPosition.$1][nextPosition.$2] == '1' &&
            !this.visted.contains(nextPosition)) {
          queue.add(nextPosition);
          visted.add(nextPosition);
        }
      }
    }
  }
}

void main() {
  Solution solution = Solution();
  print(solution.numIslands([
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "1",
      "1"
    ],
    [
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0"
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "0",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "0",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1"
    ],
    [
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "0",
      "0"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1"
    ]
  ]));
}
